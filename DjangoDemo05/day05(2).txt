2.HttpRequest - 请求对象
    1.什么是HttpResquest
        HttpRequest, 在Django中就是请求对象
        在Django中,请求对象被封装到视图处理函数中的参数里--request

    2.request中的重要内容
        1.request.scheme :请求协议
        2.request.body :  请求主体
        3.request.path :请求具体资源路径
        4.request.get_full_path :请求完整路径
        5.request.get_host() : 请求主机/域名
        6.request.method    :获取请求方法
        7.request.GET       : get请求方式中封装的数据
        8.request.POST      : post请求方式中封装的数据
        9.request.COOKIES   : 请求中cookies的相关数据
        10.request.META     : 请求的元数据(消息头)
            request.META.HTTP_REFERER  : 请求源地址
    3.获取请求提交的数据
        1.使用get方式
            1.语法:
                request.GET['参数名']
                request.GET.get('参数名')
                request.GET.getlist('参数名')
            2.能够产生get请求方式的场合
                1.地址栏的请求
                    1.<ahref='地址?参数=值&参数=值'> </a>
                    2.location.href='地址?参数=值&参数=值'
                2.表单中method 为get
                    <form method='get'>
                        姓名: <input type='text' name='uname'>
                    </form>
                 注意: Django中URL的参数是不能用此方式
                    url(r'^01-xxx/(\d+)',...)
                    此写法属于Django,只在Django中有效并非HTTP协议标准

        2.使用post方式
            1.语法:
                request.POST['参数名']
                request.POST.get('参数名')
                request.POST.getlist('参数名')
            2.CSRF
                Cross-Site Request Forgery
                跨     站点  请求     伪装
                (跨站点请求攻击)

                解决方案:
                    1.取消CSRF 验证(不推荐)
                        删除 settings.py 中 MIDDLEWARE 中的CsrfViewMiddleware 中间键
                    2.开放验证
                        在视图处理函数上增加一个装饰器 : @csrf_protect
                        @csrf_protect
                        def post_views(request):
                            pass
                    3.通过验证
                        需要在表单中增加一盒标签
                            {% csrf_token %}

                果园项目的注册部分
                    1.创建数据库 - fruitday
                    2.创建实体类 - Users
                        1.uphone - varchar(11)
                        2.upwd - varchar(200)
                        3.uemail - varchar(245)
                        4.uname - varchar(20)
                        5.isActive - Boolean,默认值为1 (True)
                    3.完善注册  - /register/
                        1.如果是get请求 则去往 register.html
                        2.如果是post请求,则处理请求数据
                            验证uphone是否存在,如果存在给出提示
    3.使用forms 模块处理表单
        1.forms 模块的作用
            通过forms模块,允许将表单与class相结合
            允许通过class 生成 表单
        2.使用forms模块
            1.在应用中去创建 forms.py 文件
            2.导入 django 提供的 forms 模块
                from django import forms
            3.创建 class , 一个class会生成一个表单
                class ClassName(forms.Form)
            4.在class 中创建属性
                一个属性对应到表单中称为一个控件
        3.forms.Form 的语法
            属性 = forms.类型函数(参数)
            1.类型:
                forms.CharField()
                forms.DateField()
                ...  ....
                每个类型都会生成一个表单控件
            2.参数
                1.label
                    控件前的初始值
                2.initial
                    控件的初始值
                3.widget
                    指定小部件
                4.error_messages
                    指定数据错误时的提示文本
        4.在模板中解析form对象
            1.注意:
                1.需要自定义<form>
                2.表单中的按钮需要自定义
            2.解析form对象
                ex:
                    form = RemarkForm()
                    return render(request,'xxx.html',locals())
                   1.手动解析
                        {% for field in form %}
                            {{field.label}}:控件中label的值
                            {{field}} : 表示的就是控件
                        {% endfor %}
                   2.自动解析
                        1.{{form.as_p}}
                            将form中的每个属性都使用p标记进行解析
                        2.{{form.as_ul}}
                            将form中的每个属性使用li标记包裹再显示
                            注意:必须手动提供<ol></ol>或<ul></ul>
                        3.{{form.as_table}}
                            将form中的每个属性使用tr标记包裹
                            注意:必须手动提供<table></table>
            3通过 forms 模块获取表单数据
                1.通过forms.Form的子类的构造器来接收post数据
                    form = RemarkForm(request.POST)
                2.必须使form通过验证,才能取值
                    form.is_valid()
                        返回True:通过验证
                        返回False:未通过验证
                3.获取表单数据
                    通过 form.cleaned_data 来接收表单数据
        4.forms模块的高级处理
            将 Models 和 Forms 结合到一起使用
            1.在forms.py中创建class
                继承自 forms.ModelForm
            2.创建内部类Meta,关联Model
                1.model : 指定要关联的实体类
                2.fields : 指定从model中取哪些字段生成控件
                    1.取值为 "__all__" : 取全部属性生成控件
                    2.取值为 列表 : 将允许生成控件的属性名放在列表中
                    3.labels :指定每个属性对应的label值,取值为字典
                        labels = {
                            'uname':'登录名称'
                            ... ...

                        }
                练习: 使用ModelForm 完成
                    1.从 Users 类 中取出 uname,upwd ;价格字段生成表单
                    2.提交数据时验证登录成功与否

            3.内置小部件 - widget
                1.什么是小部件
                    表示的是生成到网页上的控件的类型以及其他的一些html属性
                2.常用小部件类型
                    1.TextInput : type = 'text'
                    2.PasswordInput : type = 'password'
                    3.NumberInput :type = 'number'
                    4.EmailInput :type = 'email'
                    5.UrlInput : type = 'url'
                    6.HiddenInput : type = 'hidden'
                    7.CheckboxInput : type = 'checkbox'
                    8.CheckboxSelectMultiple : type='checkbox'
                        以<ul>和<li> 生成多个 checkbox 控件
                    9.RadioSelect : type='radio'
                        以<ul>和<li> 生成多个 radio 控件
                    10.Textarea : <textarea></textarea>
                    11.Select : <select></select>
                    12.SelectMultiple:
                        <select multiple></select>
                3.小部件的使用
                    1.继承自forms.Form
                        1.基本版
                            1.语法:
                                属性 = forms.CharField(
                                    label = 'xxxx'
                                    widget = forms.小部件类型)
                            2.示例:
                                upwd = forms.CharField(label='用户密码',widget= forms.PasswordInput)
                        2.高级版
                            1.特征
                                在指定控件类型的基础之上还能指定控件的一些html属性
                            2.语法
                                属性 = forms.CharField(label='标签',widget = forms.小部件类型(attrs={'html属性名':'值'
                                                                                                   'html属性名':'值'}))
                    2.继承自forms.ModelForm
                        class LoginForm(models.ModelForm):
                            class Meta:
                                model = Users
                                fields = ['uname','upwd']
                                label = {
                                    'uname':'用户名称',
                                    'upwd': '用户密码',
                                     }
                                     #指定小部件
                                        widgets = {
                                            'upwd':form.PasswordInput(attrs={'html属性名':'值'})
                                        }


2.cookie 和 session
    1.cookie 实现
        1.Django中使用cookie
            使用 响应对象 将cookie保存进客户端
            1.响应对象
                1.return HttpResponse()
                    resp = HttpResponse('响应一句话')

                2.render()
                    resp = render(request,'xxx.html',locals())

                3.redirect()
                    resp = redirect('/')
            2.保存cookie
                响应对象.set_cookie(key,value,expires)
                    key:cookie的名字
                    value:cookie的值
                    expires:默认值是以 s 为单位的数字
                        取值为0表示要删除该cookie值
            3.获取cookie
                request.COOKIES
                封装了当前站点下所有的cookies - 字典
    2.session 实现
        1.保存session的值到服务器
            request.session['KEY'] = VALUE
        2.从服务器中获取session的值
            VALUE = request.session['KEY']
        3.删除session的值
            del request.session['KEY']

        4.在settings.py 中有关session的设置
            1.SESSION_COOKIE_AGE
                作用:指定sessionid 在cookie中保存时长
                SESSION_COOKIE_AGE = 60*60*24*2 存俩天
            2.SESSION_EXPIRE_AT_BROWSER_CLOSE = True
                只要浏览器关闭, session就失效














